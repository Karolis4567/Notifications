// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notifications.Infrastructure.Data;

#nullable disable

namespace Notifications.Infrastructure.Migrations
{
    [DbContext(typeof(NotificationsAppContext))]
    [Migration("20250302151146_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Notifications.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("companyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<int>("companyMarketId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyMarketId");

                    b.Property<string>("companyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("companyNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("CompanyNumber");

                    b.Property<int>("companyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyTypeId");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 2, 17, 11, 45, 294, DateTimeKind.Local).AddTicks(319))
                        .HasColumnName("CreationDate");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 2, 17, 11, 45, 294, DateTimeKind.Local).AddTicks(1705))
                        .HasColumnName("UpdateDate");

                    b.HasKey("companyId");

                    b.HasIndex("companyMarketId");

                    b.HasIndex("companyTypeId");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("Notifications.Domain.Entities.CompanyMarket", b =>
                {
                    b.Property<int>("companyMarketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyMarketId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("companyMarketId"));

                    b.Property<string>("companyMarketCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("CompanyMarketCode");

                    b.Property<string>("companyMarketName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CompanyMarketName");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 2, 17, 11, 45, 275, DateTimeKind.Local).AddTicks(6534))
                        .HasColumnName("CreationDate");

                    b.HasKey("companyMarketId");

                    b.ToTable("CompanyMarkets", (string)null);

                    b.HasData(
                        new
                        {
                            companyMarketId = 1,
                            companyMarketCode = "DK",
                            companyMarketName = "Denmark",
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            companyMarketId = 2,
                            companyMarketCode = "NO",
                            companyMarketName = "Norway",
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            companyMarketId = 3,
                            companyMarketCode = "SE",
                            companyMarketName = "Sweden",
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            companyMarketId = 4,
                            companyMarketCode = "FI",
                            companyMarketName = "Finland",
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Notifications.Domain.Entities.CompanyNotificationSchedule", b =>
                {
                    b.Property<int>("companyNotificationsScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyNotificationsScheduleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("companyNotificationsScheduleId"));

                    b.Property<Guid>("companyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyId");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 2, 17, 11, 45, 311, DateTimeKind.Local).AddTicks(8464))
                        .HasColumnName("CreationDate");

                    b.Property<int>("notificationScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationScheduleId");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 2, 17, 11, 45, 311, DateTimeKind.Local).AddTicks(9542))
                        .HasColumnName("UpdateDate");

                    b.HasKey("companyNotificationsScheduleId");

                    b.HasIndex("companyId");

                    b.HasIndex("notificationScheduleId");

                    b.ToTable("CompanyNotificationSchedules", (string)null);
                });

            modelBuilder.Entity("Notifications.Domain.Entities.CompanyNotificationScheduleAssignRules", b =>
                {
                    b.Property<int>("companyNotificationScheduleAssignRulesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyNotificationScheduleAssignRulesId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("companyNotificationScheduleAssignRulesId"));

                    b.Property<int>("companyMarketId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyMarketId");

                    b.Property<int>("companyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyTypeId");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 2, 17, 11, 45, 307, DateTimeKind.Local).AddTicks(6217))
                        .HasColumnName("CreationDate");

                    b.Property<int>("notificationScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationScheduleId");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 2, 17, 11, 45, 307, DateTimeKind.Local).AddTicks(7409))
                        .HasColumnName("UpdateDate");

                    b.HasKey("companyNotificationScheduleAssignRulesId");

                    b.HasIndex("companyMarketId");

                    b.HasIndex("companyTypeId");

                    b.HasIndex("notificationScheduleId");

                    b.ToTable("CompanyNotificationsScheduleAssignRules", (string)null);

                    b.HasData(
                        new
                        {
                            companyNotificationScheduleAssignRulesId = 1,
                            companyMarketId = 1,
                            companyTypeId = 1,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            notificationScheduleId = 1,
                            updateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            companyNotificationScheduleAssignRulesId = 2,
                            companyMarketId = 1,
                            companyTypeId = 2,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            notificationScheduleId = 1,
                            updateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            companyNotificationScheduleAssignRulesId = 3,
                            companyMarketId = 1,
                            companyTypeId = 3,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            notificationScheduleId = 1,
                            updateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            companyNotificationScheduleAssignRulesId = 4,
                            companyMarketId = 2,
                            companyTypeId = 1,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            notificationScheduleId = 2,
                            updateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            companyNotificationScheduleAssignRulesId = 5,
                            companyMarketId = 2,
                            companyTypeId = 2,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            notificationScheduleId = 2,
                            updateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            companyNotificationScheduleAssignRulesId = 6,
                            companyMarketId = 2,
                            companyTypeId = 3,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            notificationScheduleId = 2,
                            updateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            companyNotificationScheduleAssignRulesId = 7,
                            companyMarketId = 3,
                            companyTypeId = 1,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            notificationScheduleId = 3,
                            updateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            companyNotificationScheduleAssignRulesId = 8,
                            companyMarketId = 3,
                            companyTypeId = 2,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            notificationScheduleId = 3,
                            updateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            companyNotificationScheduleAssignRulesId = 9,
                            companyMarketId = 4,
                            companyTypeId = 3,
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            notificationScheduleId = 1,
                            updateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Notifications.Domain.Entities.CompanyType", b =>
                {
                    b.Property<int>("companyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompanyTypeId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("companyTypeId"));

                    b.Property<string>("companyTypeCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("CompanyTypeCode");

                    b.Property<string>("companyTypeName")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("CompanyTypeName");

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 2, 17, 11, 45, 288, DateTimeKind.Local).AddTicks(4755))
                        .HasColumnName("CreationDate");

                    b.HasKey("companyTypeId");

                    b.ToTable("CompanyTypes", (string)null);

                    b.HasData(
                        new
                        {
                            companyTypeId = 1,
                            companyTypeCode = "s",
                            companyTypeName = "small",
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            companyTypeId = 2,
                            companyTypeCode = "m",
                            companyTypeName = "medium",
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            companyTypeId = 3,
                            companyTypeCode = "l",
                            companyTypeName = "large",
                            creationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationSchedule", b =>
                {
                    b.Property<int>("notificationScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationScheduleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("notificationScheduleId"));

                    b.Property<DateTime>("creationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 2, 17, 11, 45, 303, DateTimeKind.Local).AddTicks(3833))
                        .HasColumnName("CreationDate");

                    b.Property<string>("days")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Days");

                    b.Property<DateTime>("updateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 3, 2, 17, 11, 45, 303, DateTimeKind.Local).AddTicks(4862))
                        .HasColumnName("UpdateDate");

                    b.HasKey("notificationScheduleId");

                    b.ToTable("NotificationSchedules", (string)null);

                    b.HasData(
                        new
                        {
                            notificationScheduleId = 1,
                            creationDate = new DateTime(2025, 3, 2, 17, 11, 45, 303, DateTimeKind.Local).AddTicks(7395),
                            days = "1,5,10,15,20",
                            updateDate = new DateTime(2025, 3, 2, 17, 11, 45, 303, DateTimeKind.Local).AddTicks(7931)
                        },
                        new
                        {
                            notificationScheduleId = 2,
                            creationDate = new DateTime(2025, 3, 2, 17, 11, 45, 303, DateTimeKind.Local).AddTicks(8344),
                            days = "1,5,10,20",
                            updateDate = new DateTime(2025, 3, 2, 17, 11, 45, 303, DateTimeKind.Local).AddTicks(8354)
                        },
                        new
                        {
                            notificationScheduleId = 3,
                            creationDate = new DateTime(2025, 3, 2, 17, 11, 45, 303, DateTimeKind.Local).AddTicks(8359),
                            days = "1,7,14,28",
                            updateDate = new DateTime(2025, 3, 2, 17, 11, 45, 303, DateTimeKind.Local).AddTicks(8364)
                        });
                });

            modelBuilder.Entity("Notifications.Domain.Entities.Company", b =>
                {
                    b.HasOne("Notifications.Domain.Entities.CompanyMarket", "companyMarket")
                        .WithMany("companies")
                        .HasForeignKey("companyMarketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Notifications.Domain.Entities.CompanyType", "companyType")
                        .WithMany("companies")
                        .HasForeignKey("companyTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("companyMarket");

                    b.Navigation("companyType");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.CompanyNotificationSchedule", b =>
                {
                    b.HasOne("Notifications.Domain.Entities.Company", "company")
                        .WithMany()
                        .HasForeignKey("companyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Notifications.Domain.Entities.NotificationSchedule", "notificationSchedule")
                        .WithMany()
                        .HasForeignKey("notificationScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("company");

                    b.Navigation("notificationSchedule");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.CompanyNotificationScheduleAssignRules", b =>
                {
                    b.HasOne("Notifications.Domain.Entities.CompanyMarket", "companyMarket")
                        .WithMany("scheduleAssignRules")
                        .HasForeignKey("companyMarketId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Notifications.Domain.Entities.CompanyType", "companyType")
                        .WithMany("scheduleAssignRules")
                        .HasForeignKey("companyTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Notifications.Domain.Entities.NotificationSchedule", "notificationSchedule")
                        .WithMany("scheduleAssignRules")
                        .HasForeignKey("notificationScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("companyMarket");

                    b.Navigation("companyType");

                    b.Navigation("notificationSchedule");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.CompanyMarket", b =>
                {
                    b.Navigation("companies");

                    b.Navigation("scheduleAssignRules");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.CompanyType", b =>
                {
                    b.Navigation("companies");

                    b.Navigation("scheduleAssignRules");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationSchedule", b =>
                {
                    b.Navigation("scheduleAssignRules");
                });
#pragma warning restore 612, 618
        }
    }
}
